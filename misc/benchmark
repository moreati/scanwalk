#!/usr/bin/env python3

import dataclasses
import os
import shutil
import string
import sys
import timeit

#import pyperf

#import scanwalk


@dataclasses.dataclass
class Candidate:
    name: str
    setup: str
    stmt: str
    globals: dict


def setup(top):
    try:
        shutil.rmtree(top)
    except FileNotFoundError:
        pass
    os.mkdir(top)
    dirs = []
    dirnames = set(string.ascii_lowercase)
    filenames = [f'f{i}' for i in range(10)]
    try:
        dirs.append(os.getcwd())
        os.chdir(top)
        for l1 in dirnames:
            os.mkdir(l1)
            dirs.append(os.getcwd())
            os.chdir(l1)
            for fname in filenames:
                with open(fname, 'wb') as f: pass

            for l2 in dirnames:
                os.mkdir(l2)
                dirs.append(os.getcwd())
                os.chdir(l2)
                for fname in filenames:
                    with open(fname, 'wb') as f: pass

                for l3 in dirnames:
                    os.mkdir(l3)
                    dirs.append(os.getcwd())
                    os.chdir(l3)
                    for fname in filenames:
                        with open(fname, 'wb') as f: pass
                    os.chdir(dirs.pop())
                os.chdir(dirs.pop())
            os.chdir(dirs.pop())
    finally:
        os.chdir(dirs[0])


def os_walk_tally(top='.'):
    for _, _, files in os.walk(top):
        yield 1
        for f in files:
            yield 1


if __name__ == '__main__':
    #runner = pyperf.Runner()
    workdir = '/tmp/src'
    #setup(workdir)

    candidates = [
        Candidate(
            'os.walk',
            'os.chdir(workdir)',
            'sum(os_walk_tally())',
            {'os': os, 'os_walk_tally': os_walk_tally, 'workdir': workdir},
        ),
        #Candidate(
        #    'scanwalk.walk',
        #    'os.chdir(workdir)',
        #    'sum(1 for e in scanwalk.walk())',
        #    {'os': os, 'scanwalk': scanwalk, 'workdir': workdir},
        #),
    ]

    for c in candidates:
        #runner.timeit(name=c.name, setup=c.setup, stmt=c.stmt, globals=c.globals)
        print(c.name)
        exec(f'{c.setup};i={c.stmt};print(i)', c.globals)
        sys.exit()
        timer = timeit.Timer(stmt=c.stmt, setup=c.setup, globals=c.globals)
        number = timer.autorange()[0]*10
        print(number)
        print(timer.timeit(number))

# ➜  cpython git:(direntry-skip) ✗ ./python.exe ~/src/scanwalk/misc/benchmark
# os.walk with scandir()
# 200_000
# 3.421438582940027

# (venv) ➜  cpython git:(main) ✗ ~/src/scanwalk/misc/benchmark 
# .....................
# os.walk: Mean +- std dev: 357 ms +- 8 ms
# .....................
# WARNING: the benchmark result may be unstable
# * the standard deviation (3.78 us) is 18% of the mean (21.1 us)
# 
# Try to rerun the benchmark with more runs, values and/or loops.
# Run 'python3 -m pyperf system tune' command to reduce the system jitter.
# Use pyperf stats, pyperf dump and pyperf hist to analyze results.
# Use --quiet option to hide these warnings.
# 
# scanwalk.walk: Mean +- std dev: 21.1 us +- 3.8 us
